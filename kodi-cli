#!/bin/bash
## Author: Nawar 
## License: GPL (c) 2014
##
## Note:
## This script used the youtube code of:
## 	YouTube XBMC Script 1.0
## 	(c) 2013, Tom Laermans - http://tom.laermans.net
## 	This script is released into the public domain.
 
## Configure your XBMC RPC details here
#set -x

XBMC_HOST="${XBMC_HOST:-localhost}"
XBMC_PORT="${XBMC_PORT:-80}"
XBMC_USER="${XBMC_USER:-}"
XBMC_PASS="${XBMC_PASS:-}"
LOCK=false

function xbmc_req {
  curl -s -i -X POST --header "Content-Type: application/json" -d "$1" http://$XBMC_USER:$XBMC_PASS@$XBMC_HOST:$XBMC_PORT/jsonrpc >/dev/null 
}
 
function play_youtube {

  REGEX="^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*"
  
  ID=$1
  
  if [ "$ID" == "" ];
  then
  	echo "Syntax $0:$1 <id|url>"
  	exit
  fi
  
  if [[ $ID =~ $REGEX ]]; then
  	ID=${BASH_REMATCH[7]}
  fi
  
  echo -n "Opening video id $ID on $XBMC_HOST ..."
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';
  echo " done."
}

function play_pause {
  echo "Pausing/Playing the player"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.PlayPause", "params": { "playerid": 1 }, "id": 1}'
}

function stop {
  echo "Stopping the player"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Stop", "params": { "playerid": 1 }, "id": 1}'
}

function send_text {
  echo "Sending the text"
  xbmc_req '{"jsonrpc": "2.0", "method": "Input.SendText", "params": { "text": "'$1'" }}'
}

function press_key {

  ACTION=''
  CLR="\e[K"

  case "$1" in
	  A) ACTION='Up' 
		  echo -ne "\rUp$CLR";
		  ;;
	  B) ACTION='Down'
		  echo -ne "\rDown$CLR";
		  ;;
	  C) ACTION='Right'
		  echo -ne "\rRight$CLR";
		  ;;
	  D) ACTION='Left'
		  echo -ne "\rLeft$CLR";
		  ;;
	  c) ACTION='ContextMenu'
		  echo -ne "\rContext Menu$CLR";
		  ;;
	  i) ACTION='Info'
		  echo -ne "\rInformation$CLR";
		  ;;
	  $'\177') ACTION='Back'
		  echo -ne "\rBack$CLR";
		  ;;
	  "") ACTION='Select'
		  echo -ne "\rSelect$CLR";
		  ;;
   esac

  if [[ "$ACTION" != " " ]] && [[ $LOCK == false  ]]
  then
	LOCK=true
	xbmc_req '{"jsonrpc": "2.0", "method": "Input.'$ACTION'"}'
	LOCK=false
  fi
}

function handle_keys {
echo "Interactive navigation key: ";
while :
do
	read  -s -n1 key

	if [[ $key = q ]]
	then
		break
	elif [[ $key != ' ' ]]
	then
		press_key "$key" 
	fi
done
}

## Process command line arguments
while getopts "yopstih" opt; do
        case $opt in
		y)
			#play youtube video
			play_youtube $2	
                        ;;
		o)
			#play youtube video directly
			#this depends on using mps-youtube
			play_youtube `mpsyt /$2, i 1, q | grep -i link | awk -F 'v=' '{ print $2 }'`
                        ;;
                p)
			play_pause	
                        ;;
		s) 
			stop
			;;
		t)	send_text $2
			handle_keys
			;;
		i)
			handle_keys	
			;;
		h)
			echo -e "\n kobi-cli -[p|i|h|s|y youtbe URL/ID|t 'text to send']\n\n" \
			"-p Play/Pause the current played video\n" \
			"-s Stop the current played video\n" \
			"-y play youtube video. Use either URL/ID (of video)\n" \
			"-o play youtube video directly on Kodi. Use the name of video.\n" \
			"-i interactive navigation mode. Accept keyboard keys of Up, Down, Left, Right, Back,\n" \
			"	Context menu and information\n" \
			"-t 'text to send'\n" \
			"-h displaying this help message\n"
			;;
        esac
done
